/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.lgd.module.service;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Result implements TBase<Result, Result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Result");

  private static final TField STAT_CODE_FIELD_DESC = new TField("statCode", TType.I32, (short)1);
  private static final TField ERR_MSG_FIELD_DESC = new TField("errMsg", TType.STRING, (short)2);
  private static final TField MODULE_INFO_LIST_FIELD_DESC = new TField("moduleInfoList", TType.LIST, (short)3);


  public int statCode;
  public String errMsg;
  public List<ModuleInfo> moduleInfoList;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    STAT_CODE((short)1, "statCode"),
    ERR_MSG((short)2, "errMsg"),
    MODULE_INFO_LIST((short)3, "moduleInfoList");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STAT_CODE
  	return STAT_CODE;
        case 2: // ERR_MSG
  	return ERR_MSG;
        case 3: // MODULE_INFO_LIST
  	return MODULE_INFO_LIST;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __STATCODE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STAT_CODE, new FieldMetaData("statCode", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ERR_MSG, new FieldMetaData("errMsg", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MODULE_INFO_LIST, new FieldMetaData("moduleInfoList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, ModuleInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
  }


  public Result() {
  }

  public Result(
    int statCode,
    String errMsg,
    List<ModuleInfo> moduleInfoList)
  {
    this();
    this.statCode = statCode;
    setStatCodeIsSet(true);
    this.errMsg = errMsg;
    this.moduleInfoList = moduleInfoList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Result(Result other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.statCode = other.statCode;
    if (other.isSetErrMsg()) {
      this.errMsg = other.errMsg;
    }
    if (other.isSetModuleInfoList()) {
      List<ModuleInfo> __this__moduleInfoList = new ArrayList<ModuleInfo>();
      for (ModuleInfo other_element : other.moduleInfoList) {
        __this__moduleInfoList.add(new ModuleInfo(other_element));
      }
      this.moduleInfoList = __this__moduleInfoList;
    }
  }

  public Result deepCopy() {
    return new Result(this);
  }

  @Override
  public void clear() {
    setStatCodeIsSet(false);
    this.statCode = 0;
    this.errMsg = null;
    this.moduleInfoList = null;
  }

  public int getStatCode() {
    return this.statCode;
  }

  public Result setStatCode(int statCode) {
    this.statCode = statCode;
    setStatCodeIsSet(true);

    return this;
  }

  public void unsetStatCode() {
  __isset_bit_vector.clear(__STATCODE_ISSET_ID);
  }

  /** Returns true if field statCode is set (has been asigned a value) and false otherwise */
  public boolean isSetStatCode() {
    return __isset_bit_vector.get(__STATCODE_ISSET_ID);
  }

  public void setStatCodeIsSet(boolean value) {
    __isset_bit_vector.set(__STATCODE_ISSET_ID, value);
  }

  public String getErrMsg() {
    return this.errMsg;
  }

  public Result setErrMsg(String errMsg) {
    this.errMsg = errMsg;
    
    return this;
  }

  public void unsetErrMsg() {
    this.errMsg = null;
  }

  /** Returns true if field errMsg is set (has been asigned a value) and false otherwise */
  public boolean isSetErrMsg() {
    return this.errMsg != null;
  }

  public void setErrMsgIsSet(boolean value) {
    if (!value) {
      this.errMsg = null;
    }
  }

  public int getModuleInfoListSize() {
    return (this.moduleInfoList == null) ? 0 : this.moduleInfoList.size();
  }

  public java.util.Iterator<ModuleInfo> getModuleInfoListIterator() {
    return (this.moduleInfoList == null) ? null : this.moduleInfoList.iterator();
  }

  public void addToModuleInfoList(ModuleInfo elem) {
    if (this.moduleInfoList == null) {
      this.moduleInfoList = new ArrayList<ModuleInfo>();
    }
    this.moduleInfoList.add(elem);
  }

  public List<ModuleInfo> getModuleInfoList() {
    return this.moduleInfoList;
  }

  public Result setModuleInfoList(List<ModuleInfo> moduleInfoList) {
    this.moduleInfoList = moduleInfoList;
    
    return this;
  }

  public void unsetModuleInfoList() {
    this.moduleInfoList = null;
  }

  /** Returns true if field moduleInfoList is set (has been asigned a value) and false otherwise */
  public boolean isSetModuleInfoList() {
    return this.moduleInfoList != null;
  }

  public void setModuleInfoListIsSet(boolean value) {
    if (!value) {
      this.moduleInfoList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STAT_CODE:
      if (value == null) {
        unsetStatCode();
      } else {
        setStatCode((Integer)value);
      }
      break;
    case ERR_MSG:
      if (value == null) {
        unsetErrMsg();
      } else {
        setErrMsg((String)value);
      }
      break;
    case MODULE_INFO_LIST:
      if (value == null) {
        unsetModuleInfoList();
      } else {
        setModuleInfoList((List<ModuleInfo>)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STAT_CODE:
      return new Integer(getStatCode());
    case ERR_MSG:
      return getErrMsg();
    case MODULE_INFO_LIST:
      return getModuleInfoList();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STAT_CODE:
      return isSetStatCode();
    case ERR_MSG:
      return isSetErrMsg();
    case MODULE_INFO_LIST:
      return isSetModuleInfoList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Result)
      return this.equals((Result)that);
    return false;
  }

  public boolean equals(Result that) {
    if (that == null)
      return false;
    boolean this_present_statCode = true;
    boolean that_present_statCode = true;
    if (this_present_statCode || that_present_statCode) {
      if (!(this_present_statCode && that_present_statCode))
        return false;
      if (this.statCode != that.statCode)
        return false;
    }
    boolean this_present_errMsg = true && this.isSetErrMsg();
    boolean that_present_errMsg = true && that.isSetErrMsg();
    if (this_present_errMsg || that_present_errMsg) {
      if (!(this_present_errMsg && that_present_errMsg))
        return false;
      if (!this.errMsg.equals(that.errMsg))
        return false;
    }
    boolean this_present_moduleInfoList = true && this.isSetModuleInfoList();
    boolean that_present_moduleInfoList = true && that.isSetModuleInfoList();
    if (this_present_moduleInfoList || that_present_moduleInfoList) {
      if (!(this_present_moduleInfoList && that_present_moduleInfoList))
        return false;
      if (!this.moduleInfoList.equals(that.moduleInfoList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_statCode = true;
    builder.append(present_statCode);
    if (present_statCode)
      builder.append(statCode);
    boolean present_errMsg = true && (isSetErrMsg());
    builder.append(present_errMsg);
    if (present_errMsg)
      builder.append(errMsg);
    boolean present_moduleInfoList = true && (isSetModuleInfoList());
    builder.append(present_moduleInfoList);
    if (present_moduleInfoList)
      builder.append(moduleInfoList);
    return builder.toHashCode();
  }

  public int compareTo(Result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Result typedOther = (Result)other;

    lastComparison = Boolean.valueOf(isSetStatCode()).compareTo(typedOther.isSetStatCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatCode()) {
      lastComparison = TBaseHelper.compareTo(this.statCode, typedOther.statCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrMsg()).compareTo(typedOther.isSetErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrMsg()) {
      lastComparison = TBaseHelper.compareTo(this.errMsg, typedOther.errMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModuleInfoList()).compareTo(typedOther.isSetModuleInfoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuleInfoList()) {
      lastComparison = TBaseHelper.compareTo(this.moduleInfoList, typedOther.moduleInfoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // STAT_CODE
          if (field.type == TType.I32) {
            this.statCode = iprot.readI32();
            setStatCodeIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ERR_MSG
          if (field.type == TType.STRING) {
            this.errMsg = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MODULE_INFO_LIST
          if (field.type == TType.LIST) {
            {
            TList _list0 = iprot.readListBegin();
            this.moduleInfoList = new ArrayList<ModuleInfo>(_list0.size);
            for (int _i1 = 0; _i1 < _list0.size; ++_i1)
            {
              ModuleInfo _elem2;
              _elem2 = new ModuleInfo();
              _elem2.read(iprot);
              this.moduleInfoList.add(_elem2);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(STAT_CODE_FIELD_DESC);
    oprot.writeI32(this.statCode);
    oprot.writeFieldEnd();
    if (this.errMsg != null) {
      oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
      oprot.writeString(this.errMsg);
      oprot.writeFieldEnd();
    }
    if (this.moduleInfoList != null) {
      oprot.writeFieldBegin(MODULE_INFO_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.moduleInfoList.size()));
        for (ModuleInfo _iter3 : this.moduleInfoList)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Result(");
    boolean first = true;
    sb.append("statCode:");
    sb.append(this.statCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errMsg:");
    if (this.errMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.errMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moduleInfoList:");
    if (this.moduleInfoList == null) {
      sb.append("null");
    } else {
      sb.append(this.moduleInfoList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
