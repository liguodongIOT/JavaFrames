/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.lgd.module.service;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class ModuleInfo implements TBase<ModuleInfo, ModuleInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ModuleInfo");

  private static final TField STAT_DATE_FIELD_DESC = new TField("statDate", TType.STRING, (short)1);
  private static final TField MODULE_ID_FIELD_DESC = new TField("moduleId", TType.STRING, (short)2);
  private static final TField MODULE_NAME_FIELD_DESC = new TField("moduleName", TType.STRING, (short)3);
  private static final TField LOCATION_ID_FIELD_DESC = new TField("locationId", TType.STRING, (short)4);
  private static final TField LOCATION_NAME_FIELD_DESC = new TField("locationName", TType.STRING, (short)5);
  private static final TField BEGIN_TIME_FIELD_DESC = new TField("beginTime", TType.STRING, (short)6);
  private static final TField END_TIME_FIELD_DESC = new TField("endTime", TType.STRING, (short)7);
  private static final TField PV_FIELD_DESC = new TField("Pv", TType.I32, (short)8);
  private static final TField UV_FIELD_DESC = new TField("Uv", TType.I32, (short)9);


  public String statDate;
  public String moduleId;
  public String moduleName;
  public String locationId;
  public String locationName;
  public String beginTime;
  public String endTime;
  public int Pv;
  public int Uv;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    STAT_DATE((short)1, "statDate"),
    MODULE_ID((short)2, "moduleId"),
    MODULE_NAME((short)3, "moduleName"),
    LOCATION_ID((short)4, "locationId"),
    LOCATION_NAME((short)5, "locationName"),
    BEGIN_TIME((short)6, "beginTime"),
    END_TIME((short)7, "endTime"),
    PV((short)8, "Pv"),
    UV((short)9, "Uv");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STAT_DATE
  	return STAT_DATE;
        case 2: // MODULE_ID
  	return MODULE_ID;
        case 3: // MODULE_NAME
  	return MODULE_NAME;
        case 4: // LOCATION_ID
  	return LOCATION_ID;
        case 5: // LOCATION_NAME
  	return LOCATION_NAME;
        case 6: // BEGIN_TIME
  	return BEGIN_TIME;
        case 7: // END_TIME
  	return END_TIME;
        case 8: // PV
  	return PV;
        case 9: // UV
  	return UV;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __PV_ISSET_ID = 0;
  private static final int __UV_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STAT_DATE, new FieldMetaData("statDate", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MODULE_ID, new FieldMetaData("moduleId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.MODULE_NAME, new FieldMetaData("moduleName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOCATION_ID, new FieldMetaData("locationId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.LOCATION_NAME, new FieldMetaData("locationName", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.BEGIN_TIME, new FieldMetaData("beginTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new FieldMetaData("endTime", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PV, new FieldMetaData("Pv", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.UV, new FieldMetaData("Uv", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ModuleInfo.class, metaDataMap);
  }


  public ModuleInfo() {
  }

  public ModuleInfo(
    String statDate,
    String moduleId,
    String moduleName,
    String locationId,
    String locationName,
    String beginTime,
    String endTime,
    int Pv,
    int Uv)
  {
    this();
    this.statDate = statDate;
    this.moduleId = moduleId;
    this.moduleName = moduleName;
    this.locationId = locationId;
    this.locationName = locationName;
    this.beginTime = beginTime;
    this.endTime = endTime;
    this.Pv = Pv;
    setPvIsSet(true);
    this.Uv = Uv;
    setUvIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModuleInfo(ModuleInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetStatDate()) {
      this.statDate = other.statDate;
    }
    if (other.isSetModuleId()) {
      this.moduleId = other.moduleId;
    }
    if (other.isSetModuleName()) {
      this.moduleName = other.moduleName;
    }
    if (other.isSetLocationId()) {
      this.locationId = other.locationId;
    }
    if (other.isSetLocationName()) {
      this.locationName = other.locationName;
    }
    if (other.isSetBeginTime()) {
      this.beginTime = other.beginTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.Pv = other.Pv;
    this.Uv = other.Uv;
  }

  public ModuleInfo deepCopy() {
    return new ModuleInfo(this);
  }

  @Override
  public void clear() {
    this.statDate = null;
    this.moduleId = null;
    this.moduleName = null;
    this.locationId = null;
    this.locationName = null;
    this.beginTime = null;
    this.endTime = null;
    setPvIsSet(false);
    this.Pv = 0;
    setUvIsSet(false);
    this.Uv = 0;
  }

  public String getStatDate() {
    return this.statDate;
  }

  public ModuleInfo setStatDate(String statDate) {
    this.statDate = statDate;
    
    return this;
  }

  public void unsetStatDate() {
    this.statDate = null;
  }

  /** Returns true if field statDate is set (has been asigned a value) and false otherwise */
  public boolean isSetStatDate() {
    return this.statDate != null;
  }

  public void setStatDateIsSet(boolean value) {
    if (!value) {
      this.statDate = null;
    }
  }

  public String getModuleId() {
    return this.moduleId;
  }

  public ModuleInfo setModuleId(String moduleId) {
    this.moduleId = moduleId;
    
    return this;
  }

  public void unsetModuleId() {
    this.moduleId = null;
  }

  /** Returns true if field moduleId is set (has been asigned a value) and false otherwise */
  public boolean isSetModuleId() {
    return this.moduleId != null;
  }

  public void setModuleIdIsSet(boolean value) {
    if (!value) {
      this.moduleId = null;
    }
  }

  public String getModuleName() {
    return this.moduleName;
  }

  public ModuleInfo setModuleName(String moduleName) {
    this.moduleName = moduleName;
    
    return this;
  }

  public void unsetModuleName() {
    this.moduleName = null;
  }

  /** Returns true if field moduleName is set (has been asigned a value) and false otherwise */
  public boolean isSetModuleName() {
    return this.moduleName != null;
  }

  public void setModuleNameIsSet(boolean value) {
    if (!value) {
      this.moduleName = null;
    }
  }

  public String getLocationId() {
    return this.locationId;
  }

  public ModuleInfo setLocationId(String locationId) {
    this.locationId = locationId;
    
    return this;
  }

  public void unsetLocationId() {
    this.locationId = null;
  }

  /** Returns true if field locationId is set (has been asigned a value) and false otherwise */
  public boolean isSetLocationId() {
    return this.locationId != null;
  }

  public void setLocationIdIsSet(boolean value) {
    if (!value) {
      this.locationId = null;
    }
  }

  public String getLocationName() {
    return this.locationName;
  }

  public ModuleInfo setLocationName(String locationName) {
    this.locationName = locationName;
    
    return this;
  }

  public void unsetLocationName() {
    this.locationName = null;
  }

  /** Returns true if field locationName is set (has been asigned a value) and false otherwise */
  public boolean isSetLocationName() {
    return this.locationName != null;
  }

  public void setLocationNameIsSet(boolean value) {
    if (!value) {
      this.locationName = null;
    }
  }

  public String getBeginTime() {
    return this.beginTime;
  }

  public ModuleInfo setBeginTime(String beginTime) {
    this.beginTime = beginTime;
    
    return this;
  }

  public void unsetBeginTime() {
    this.beginTime = null;
  }

  /** Returns true if field beginTime is set (has been asigned a value) and false otherwise */
  public boolean isSetBeginTime() {
    return this.beginTime != null;
  }

  public void setBeginTimeIsSet(boolean value) {
    if (!value) {
      this.beginTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public ModuleInfo setEndTime(String endTime) {
    this.endTime = endTime;
    
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been asigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public int getPv() {
    return this.Pv;
  }

  public ModuleInfo setPv(int Pv) {
    this.Pv = Pv;
    setPvIsSet(true);

    return this;
  }

  public void unsetPv() {
  __isset_bit_vector.clear(__PV_ISSET_ID);
  }

  /** Returns true if field Pv is set (has been asigned a value) and false otherwise */
  public boolean isSetPv() {
    return __isset_bit_vector.get(__PV_ISSET_ID);
  }

  public void setPvIsSet(boolean value) {
    __isset_bit_vector.set(__PV_ISSET_ID, value);
  }

  public int getUv() {
    return this.Uv;
  }

  public ModuleInfo setUv(int Uv) {
    this.Uv = Uv;
    setUvIsSet(true);

    return this;
  }

  public void unsetUv() {
  __isset_bit_vector.clear(__UV_ISSET_ID);
  }

  /** Returns true if field Uv is set (has been asigned a value) and false otherwise */
  public boolean isSetUv() {
    return __isset_bit_vector.get(__UV_ISSET_ID);
  }

  public void setUvIsSet(boolean value) {
    __isset_bit_vector.set(__UV_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STAT_DATE:
      if (value == null) {
        unsetStatDate();
      } else {
        setStatDate((String)value);
      }
      break;
    case MODULE_ID:
      if (value == null) {
        unsetModuleId();
      } else {
        setModuleId((String)value);
      }
      break;
    case MODULE_NAME:
      if (value == null) {
        unsetModuleName();
      } else {
        setModuleName((String)value);
      }
      break;
    case LOCATION_ID:
      if (value == null) {
        unsetLocationId();
      } else {
        setLocationId((String)value);
      }
      break;
    case LOCATION_NAME:
      if (value == null) {
        unsetLocationName();
      } else {
        setLocationName((String)value);
      }
      break;
    case BEGIN_TIME:
      if (value == null) {
        unsetBeginTime();
      } else {
        setBeginTime((String)value);
      }
      break;
    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;
    case PV:
      if (value == null) {
        unsetPv();
      } else {
        setPv((Integer)value);
      }
      break;
    case UV:
      if (value == null) {
        unsetUv();
      } else {
        setUv((Integer)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STAT_DATE:
      return getStatDate();
    case MODULE_ID:
      return getModuleId();
    case MODULE_NAME:
      return getModuleName();
    case LOCATION_ID:
      return getLocationId();
    case LOCATION_NAME:
      return getLocationName();
    case BEGIN_TIME:
      return getBeginTime();
    case END_TIME:
      return getEndTime();
    case PV:
      return new Integer(getPv());
    case UV:
      return new Integer(getUv());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STAT_DATE:
      return isSetStatDate();
    case MODULE_ID:
      return isSetModuleId();
    case MODULE_NAME:
      return isSetModuleName();
    case LOCATION_ID:
      return isSetLocationId();
    case LOCATION_NAME:
      return isSetLocationName();
    case BEGIN_TIME:
      return isSetBeginTime();
    case END_TIME:
      return isSetEndTime();
    case PV:
      return isSetPv();
    case UV:
      return isSetUv();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModuleInfo)
      return this.equals((ModuleInfo)that);
    return false;
  }

  public boolean equals(ModuleInfo that) {
    if (that == null)
      return false;
    boolean this_present_statDate = true && this.isSetStatDate();
    boolean that_present_statDate = true && that.isSetStatDate();
    if (this_present_statDate || that_present_statDate) {
      if (!(this_present_statDate && that_present_statDate))
        return false;
      if (!this.statDate.equals(that.statDate))
        return false;
    }
    boolean this_present_moduleId = true && this.isSetModuleId();
    boolean that_present_moduleId = true && that.isSetModuleId();
    if (this_present_moduleId || that_present_moduleId) {
      if (!(this_present_moduleId && that_present_moduleId))
        return false;
      if (!this.moduleId.equals(that.moduleId))
        return false;
    }
    boolean this_present_moduleName = true && this.isSetModuleName();
    boolean that_present_moduleName = true && that.isSetModuleName();
    if (this_present_moduleName || that_present_moduleName) {
      if (!(this_present_moduleName && that_present_moduleName))
        return false;
      if (!this.moduleName.equals(that.moduleName))
        return false;
    }
    boolean this_present_locationId = true && this.isSetLocationId();
    boolean that_present_locationId = true && that.isSetLocationId();
    if (this_present_locationId || that_present_locationId) {
      if (!(this_present_locationId && that_present_locationId))
        return false;
      if (!this.locationId.equals(that.locationId))
        return false;
    }
    boolean this_present_locationName = true && this.isSetLocationName();
    boolean that_present_locationName = true && that.isSetLocationName();
    if (this_present_locationName || that_present_locationName) {
      if (!(this_present_locationName && that_present_locationName))
        return false;
      if (!this.locationName.equals(that.locationName))
        return false;
    }
    boolean this_present_beginTime = true && this.isSetBeginTime();
    boolean that_present_beginTime = true && that.isSetBeginTime();
    if (this_present_beginTime || that_present_beginTime) {
      if (!(this_present_beginTime && that_present_beginTime))
        return false;
      if (!this.beginTime.equals(that.beginTime))
        return false;
    }
    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }
    boolean this_present_Pv = true;
    boolean that_present_Pv = true;
    if (this_present_Pv || that_present_Pv) {
      if (!(this_present_Pv && that_present_Pv))
        return false;
      if (this.Pv != that.Pv)
        return false;
    }
    boolean this_present_Uv = true;
    boolean that_present_Uv = true;
    if (this_present_Uv || that_present_Uv) {
      if (!(this_present_Uv && that_present_Uv))
        return false;
      if (this.Uv != that.Uv)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_statDate = true && (isSetStatDate());
    builder.append(present_statDate);
    if (present_statDate)
      builder.append(statDate);
    boolean present_moduleId = true && (isSetModuleId());
    builder.append(present_moduleId);
    if (present_moduleId)
      builder.append(moduleId);
    boolean present_moduleName = true && (isSetModuleName());
    builder.append(present_moduleName);
    if (present_moduleName)
      builder.append(moduleName);
    boolean present_locationId = true && (isSetLocationId());
    builder.append(present_locationId);
    if (present_locationId)
      builder.append(locationId);
    boolean present_locationName = true && (isSetLocationName());
    builder.append(present_locationName);
    if (present_locationName)
      builder.append(locationName);
    boolean present_beginTime = true && (isSetBeginTime());
    builder.append(present_beginTime);
    if (present_beginTime)
      builder.append(beginTime);
    boolean present_endTime = true && (isSetEndTime());
    builder.append(present_endTime);
    if (present_endTime)
      builder.append(endTime);
    boolean present_Pv = true;
    builder.append(present_Pv);
    if (present_Pv)
      builder.append(Pv);
    boolean present_Uv = true;
    builder.append(present_Uv);
    if (present_Uv)
      builder.append(Uv);
    return builder.toHashCode();
  }

  public int compareTo(ModuleInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ModuleInfo typedOther = (ModuleInfo)other;

    lastComparison = Boolean.valueOf(isSetStatDate()).compareTo(typedOther.isSetStatDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatDate()) {
      lastComparison = TBaseHelper.compareTo(this.statDate, typedOther.statDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModuleId()).compareTo(typedOther.isSetModuleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuleId()) {
      lastComparison = TBaseHelper.compareTo(this.moduleId, typedOther.moduleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModuleName()).compareTo(typedOther.isSetModuleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuleName()) {
      lastComparison = TBaseHelper.compareTo(this.moduleName, typedOther.moduleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationId()).compareTo(typedOther.isSetLocationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationId()) {
      lastComparison = TBaseHelper.compareTo(this.locationId, typedOther.locationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationName()).compareTo(typedOther.isSetLocationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationName()) {
      lastComparison = TBaseHelper.compareTo(this.locationName, typedOther.locationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTime()) {
      lastComparison = TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPv()).compareTo(typedOther.isSetPv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPv()) {
      lastComparison = TBaseHelper.compareTo(this.Pv, typedOther.Pv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUv()).compareTo(typedOther.isSetUv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUv()) {
      lastComparison = TBaseHelper.compareTo(this.Uv, typedOther.Uv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // STAT_DATE
          if (field.type == TType.STRING) {
            this.statDate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MODULE_ID
          if (field.type == TType.STRING) {
            this.moduleId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MODULE_NAME
          if (field.type == TType.STRING) {
            this.moduleName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LOCATION_ID
          if (field.type == TType.STRING) {
            this.locationId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // LOCATION_NAME
          if (field.type == TType.STRING) {
            this.locationName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // BEGIN_TIME
          if (field.type == TType.STRING) {
            this.beginTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // END_TIME
          if (field.type == TType.STRING) {
            this.endTime = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // PV
          if (field.type == TType.I32) {
            this.Pv = iprot.readI32();
            setPvIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // UV
          if (field.type == TType.I32) {
            this.Uv = iprot.readI32();
            setUvIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.statDate != null) {
      oprot.writeFieldBegin(STAT_DATE_FIELD_DESC);
      oprot.writeString(this.statDate);
      oprot.writeFieldEnd();
    }
    if (this.moduleId != null) {
      oprot.writeFieldBegin(MODULE_ID_FIELD_DESC);
      oprot.writeString(this.moduleId);
      oprot.writeFieldEnd();
    }
    if (this.moduleName != null) {
      oprot.writeFieldBegin(MODULE_NAME_FIELD_DESC);
      oprot.writeString(this.moduleName);
      oprot.writeFieldEnd();
    }
    if (this.locationId != null) {
      oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
      oprot.writeString(this.locationId);
      oprot.writeFieldEnd();
    }
    if (this.locationName != null) {
      oprot.writeFieldBegin(LOCATION_NAME_FIELD_DESC);
      oprot.writeString(this.locationName);
      oprot.writeFieldEnd();
    }
    if (this.beginTime != null) {
      oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
      oprot.writeString(this.beginTime);
      oprot.writeFieldEnd();
    }
    if (this.endTime != null) {
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeString(this.endTime);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PV_FIELD_DESC);
    oprot.writeI32(this.Pv);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UV_FIELD_DESC);
    oprot.writeI32(this.Uv);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModuleInfo(");
    boolean first = true;
    sb.append("statDate:");
    if (this.statDate == null) {
      sb.append("null");
    } else {
      sb.append(this.statDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moduleId:");
    if (this.moduleId == null) {
      sb.append("null");
    } else {
      sb.append(this.moduleId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moduleName:");
    if (this.moduleName == null) {
      sb.append("null");
    } else {
      sb.append(this.moduleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationId:");
    if (this.locationId == null) {
      sb.append("null");
    } else {
      sb.append(this.locationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationName:");
    if (this.locationName == null) {
      sb.append("null");
    } else {
      sb.append(this.locationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginTime:");
    if (this.beginTime == null) {
      sb.append("null");
    } else {
      sb.append(this.beginTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Pv:");
    sb.append(this.Pv);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Uv:");
    sb.append(this.Uv);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
