/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.lgd.module.service;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class QueryInfo implements TBase<QueryInfo, QueryInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("QueryInfo");

  private static final TField MODULE_ID_FIELD_DESC = new TField("moduleId", TType.STRING, (short)1);
  private static final TField START_DATE_FIELD_DESC = new TField("startDate", TType.STRING, (short)2);
  private static final TField END_DATE_FIELD_DESC = new TField("endDate", TType.STRING, (short)3);


  public String moduleId;
  public String startDate;
  public String endDate;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    MODULE_ID((short)1, "moduleId"),
    START_DATE((short)2, "startDate"),
    END_DATE((short)3, "endDate");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODULE_ID
  	return MODULE_ID;
        case 2: // START_DATE
  	return START_DATE;
        case 3: // END_DATE
  	return END_DATE;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODULE_ID, new FieldMetaData("moduleId", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.START_DATE, new FieldMetaData("startDate", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new FieldMetaData("endDate", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(QueryInfo.class, metaDataMap);
  }


  public QueryInfo() {
  }

  public QueryInfo(
    String moduleId,
    String startDate,
    String endDate)
  {
    this();
    this.moduleId = moduleId;
    this.startDate = startDate;
    this.endDate = endDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryInfo(QueryInfo other) {
    if (other.isSetModuleId()) {
      this.moduleId = other.moduleId;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
  }

  public QueryInfo deepCopy() {
    return new QueryInfo(this);
  }

  @Override
  public void clear() {
    this.moduleId = null;
    this.startDate = null;
    this.endDate = null;
  }

  public String getModuleId() {
    return this.moduleId;
  }

  public QueryInfo setModuleId(String moduleId) {
    this.moduleId = moduleId;
    
    return this;
  }

  public void unsetModuleId() {
    this.moduleId = null;
  }

  /** Returns true if field moduleId is set (has been asigned a value) and false otherwise */
  public boolean isSetModuleId() {
    return this.moduleId != null;
  }

  public void setModuleIdIsSet(boolean value) {
    if (!value) {
      this.moduleId = null;
    }
  }

  public String getStartDate() {
    return this.startDate;
  }

  public QueryInfo setStartDate(String startDate) {
    this.startDate = startDate;
    
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been asigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public QueryInfo setEndDate(String endDate) {
    this.endDate = endDate;
    
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been asigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODULE_ID:
      if (value == null) {
        unsetModuleId();
      } else {
        setModuleId((String)value);
      }
      break;
    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;
    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODULE_ID:
      return getModuleId();
    case START_DATE:
      return getStartDate();
    case END_DATE:
      return getEndDate();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODULE_ID:
      return isSetModuleId();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryInfo)
      return this.equals((QueryInfo)that);
    return false;
  }

  public boolean equals(QueryInfo that) {
    if (that == null)
      return false;
    boolean this_present_moduleId = true && this.isSetModuleId();
    boolean that_present_moduleId = true && that.isSetModuleId();
    if (this_present_moduleId || that_present_moduleId) {
      if (!(this_present_moduleId && that_present_moduleId))
        return false;
      if (!this.moduleId.equals(that.moduleId))
        return false;
    }
    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }
    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_moduleId = true && (isSetModuleId());
    builder.append(present_moduleId);
    if (present_moduleId)
      builder.append(moduleId);
    boolean present_startDate = true && (isSetStartDate());
    builder.append(present_startDate);
    if (present_startDate)
      builder.append(startDate);
    boolean present_endDate = true && (isSetEndDate());
    builder.append(present_endDate);
    if (present_endDate)
      builder.append(endDate);
    return builder.toHashCode();
  }

  public int compareTo(QueryInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryInfo typedOther = (QueryInfo)other;

    lastComparison = Boolean.valueOf(isSetModuleId()).compareTo(typedOther.isSetModuleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuleId()) {
      lastComparison = TBaseHelper.compareTo(this.moduleId, typedOther.moduleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(typedOther.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = TBaseHelper.compareTo(this.startDate, typedOther.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // MODULE_ID
          if (field.type == TType.STRING) {
            this.moduleId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // START_DATE
          if (field.type == TType.STRING) {
            this.startDate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // END_DATE
          if (field.type == TType.STRING) {
            this.endDate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.moduleId != null) {
      oprot.writeFieldBegin(MODULE_ID_FIELD_DESC);
      oprot.writeString(this.moduleId);
      oprot.writeFieldEnd();
    }
    if (this.startDate != null) {
      oprot.writeFieldBegin(START_DATE_FIELD_DESC);
      oprot.writeString(this.startDate);
      oprot.writeFieldEnd();
    }
    if (this.endDate != null) {
      oprot.writeFieldBegin(END_DATE_FIELD_DESC);
      oprot.writeString(this.endDate);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryInfo(");
    boolean first = true;
    sb.append("moduleId:");
    if (this.moduleId == null) {
      sb.append("null");
    } else {
      sb.append(this.moduleId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
